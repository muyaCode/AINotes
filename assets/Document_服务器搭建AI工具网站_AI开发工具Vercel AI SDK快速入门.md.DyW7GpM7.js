import{_ as s,c as n,o as a,a4 as e}from"./chunks/framework.DBIahkuf.js";const b=JSON.parse('{"title":"AI 开发工具Vercel AI SDK 快速入门","description":"","frontmatter":{},"headers":[],"relativePath":"Document/服务器搭建AI工具网站/AI开发工具Vercel AI SDK快速入门.md","filePath":"Document/服务器搭建AI工具网站/AI开发工具Vercel AI SDK快速入门.md","lastUpdated":1689592421000}'),p={name:"Document/服务器搭建AI工具网站/AI开发工具Vercel AI SDK快速入门.md"},l=e(`<h1 id="ai-开发工具vercel-ai-sdk-快速入门" tabindex="-1">AI 开发工具Vercel AI SDK 快速入门 <a class="header-anchor" href="#ai-开发工具vercel-ai-sdk-快速入门" aria-label="Permalink to &quot;AI 开发工具Vercel AI SDK 快速入门&quot;">​</a></h1><p>人工智能驱动的Web开发世界的一个令人兴奋的开发工具 <a href="https://github.com/vercel-labs/ai" target="_blank" rel="noreferrer">Vercel AI SDK</a>，这是一个在科技界引起轰动的开源库。这个强大的工具集允许开发人员轻松构建边缘就绪的人工智能流文本和聊天Web应用程序。</p><p>Vercel AI SDK 是一个工具集合，旨在帮助构建基于AI的Web用户界面。为了更好的了解它可以做什么，本文通过一个快速入门教程，通过构建一个简单的人工智能标语生成器。</p><blockquote><p>一个可互操作、支持流媒体、边缘就绪的软件开发套件，适用于使用 React 和 Svelte 构建的 AI 应用程序。</p></blockquote><p><strong>GitHub</strong>：<a href="https://github.com/vercel-labs/ai" target="_blank" rel="noreferrer">github.com/vercel-labs…</a></p><p>首先，需要设置项目开发环境，需要安装 <code>Node.js 18+</code> 和 <code>OpenAI API</code> 密钥。通过创建一个新的 <code>Next.js</code> 应用程序来开始。SDK提供了一些入门代码，可帮助快速启动并运行。</p><p><strong>项目地址</strong>：<a href="https://github.com/QuintionTang/vercel-ai-app" target="_blank" rel="noreferrer">github.com/QuintionTan…</a></p><p>使用以下命令创建新项目：</p><div class="language-lua line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">npx</span><span style="color:#E06C75;"> create</span><span style="color:#ABB2BF;">-</span><span style="color:#56B6C2;">next</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">app</span><span style="color:#E06C75;"> vercel</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">ai</span><span style="color:#ABB2BF;">-</span><span style="color:#E06C75;">app</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>此命令启动项目创建项目并指导引导回答一些项目配置的问题：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8f452a34c1574afc9a47e82b66ab23bc~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="2.jpeg"></p><p>之后，将下载并安装项目模板和依赖项。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/59733c21aeb84d77aba80558a62d1d87~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="3.jpeg"></p><p>安装项目完成后，接下来进入新创建的项目文件夹：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#56B6C2;">cd</span><span style="color:#98C379;"> vercel-ai-app</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>接下来，将安装必要的依赖项 <code>ai</code> 和 <code>openai-edge</code>。后者与 <code>Vercel Edge Functions</code> 兼容，因此比官方 <code>OpenAI SDK</code> 更受欢迎，使用以下命令添加这些依赖项：</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">npm install ai </span><span style="color:#E06C75;">openai-edge</span><span style="color:#C678DD;"> --save</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>然后，将在项目根目录的 <code>.env.local</code> 文件用来配置 <code>OpenAI API</code> 密钥。</p><div class="language-ini line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">OPENAI_API_KEY</span><span style="color:#ABB2BF;">=</span><span style="color:#98C379;">YOUR OPEN AI API KEY</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>安装样式相关的依赖：</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">npm install autoprefixer postcss tailwindcss --save</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>根目录下创建文件 <code>postcss.config.js</code>，代码如下：</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">module</span><span style="color:#D19A66;">.exports</span><span style="color:#C678DD;"> =</span><span style="color:#ABB2BF;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    plugins: {</span></span>
<span class="line"><span style="color:#ABB2BF;">        tailwindcss: {},</span></span>
<span class="line"><span style="color:#C678DD;">        autoprefixer:</span><span style="color:#ABB2BF;"> {},</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#ABB2BF;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>下一步是创建 API 路由，路由处理程序将使用 <code>Edge Runtime</code> 通过 <code>OpenAI</code> 生成文本完成，然后将其流回 <code>Next.js</code>。 SDK 提供了一个简洁的示例来说明路由处理程序应该是什么样子：</p><div class="language-php line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">import { Configuration, OpenAIApi } from </span><span style="color:#98C379;">&quot;openai-edge&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">import { OpenAIStream, StreamingTextResponse } from </span><span style="color:#98C379;">&quot;ai&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> config </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> Configuration</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#61AFEF;">    apiKey</span><span style="color:#ABB2BF;">: process</span><span style="color:#ABB2BF;">.</span><span style="color:#ABB2BF;">env</span><span style="color:#ABB2BF;">.</span><span style="color:#ABB2BF;">OPENAI_API_KEY,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> openai </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> OpenAIApi</span><span style="color:#ABB2BF;">(config);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">export </span><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> runtime </span><span style="color:#56B6C2;">=</span><span style="color:#98C379;"> &quot;edge&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#ABB2BF;">export async </span><span style="color:#C678DD;">function</span><span style="color:#61AFEF;"> POST</span><span style="color:#ABB2BF;">(req) {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#ABB2BF;"> { prompt } </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> await req</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#ABB2BF;"> response </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> await openai</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createCompletion</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#61AFEF;">        model: </span><span style="color:#98C379;">&quot;text-davinci-003&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">        stream: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">        temperature: </span><span style="color:#D19A66;">0.6</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">        prompt: </span><span style="color:#98C379;">\`Create three slogans for a business with unique features.</span></span>
<span class="line"><span style="color:#98C379;"> </span></span>
<span class="line"><span style="color:#98C379;">    Business: Bookstore with cats</span></span>
<span class="line"><span style="color:#98C379;">    Slogans: &quot;Purr-fect Pages&quot;, &quot;Books and Whiskers&quot;, &quot;Novels and Nuzzles&quot;</span></span>
<span class="line"><span style="color:#98C379;">    Business: Gym with rock climbing</span></span>
<span class="line"><span style="color:#98C379;">    Slogans: &quot;Peak Performance&quot;, &quot;Reach New Heights&quot;, &quot;Climb Your Way Fit&quot;</span></span>
<span class="line"><span style="color:#98C379;">    Business: </span><span style="color:#E06C75;">\${prompt}</span></span>
<span class="line"><span style="color:#98C379;">    Slogans:\`</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">    });</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#ABB2BF;"> stream </span><span style="color:#56B6C2;">=</span><span style="color:#61AFEF;"> OpenAIStream</span><span style="color:#ABB2BF;">(response);</span></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#C678DD;"> new</span><span style="color:#E5C07B;"> StreamingTextResponse</span><span style="color:#ABB2BF;">(stream);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>将上述代码复制到新建文件中 <code>app/api/completion/route.js</code>。接下来分解一下这段代码，首先是导入必要的模块：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">Configuration</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">OpenAIApi</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;openai-edge&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">OpenAIStream</span><span style="color:#ABB2BF;">, </span><span style="color:#E06C75;">StreamingTextResponse</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;ai&quot;</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>Configuration</code> 和 <code>OpenAIApi</code> 是从 <code>openai-edge</code> 包中导入的。<code>Configuration</code> 用于设置 <code>OpenAI API</code> 客户端的配置，而 <code>OpenAIApi</code> 就是客户端本身。<code>OpenAIStream</code> 和 <code>StreamingTextResponse</code> 是从 <code>ai</code> 包导入的。<code>OpenAIStream</code> 用于将 <code>OpenAI API</code> 的响应转换为流，<code>StreamingTextResponse</code> 用于将流作为响应返回。</p><p>下来，设置 OpenAI API 客户端：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">const</span><span style="color:#98C379;"> config</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> new</span><span style="color:#98C379;"> Configuration</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#61AFEF;">    apiKey:</span><span style="color:#98C379;"> process.env.OPENAI_API_KEY,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span>
<span class="line"><span style="color:#61AFEF;">const</span><span style="color:#98C379;"> openai</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> new</span><span style="color:#98C379;"> OpenAIApi</span><span style="color:#ABB2BF;">(</span><span style="color:#61AFEF;">config</span><span style="color:#ABB2BF;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>上面代码创建一个新的 <code>Configuration</code> 实例，传入一个包含 <code>OpenAI API</code> 密钥的对象，该密钥存储在环境变量中。然后创建一个新的 <code>OpenAIApi</code> 实例，传入刚刚创建的配置。</p><p>将运行时设置为 <code>edge</code> 以获得最佳性能：</p><div class="language-ini line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#98C379;">export const </span><span style="color:#C678DD;">runtime</span><span style="color:#ABB2BF;"> =</span><span style="color:#98C379;"> &quot;edge&quot;</span><span style="color:#7F848E;font-style:italic;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>接下来，定义一个异步函数 <code>POST</code>，它将 <code>Request</code> 对象作为参数：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> async</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> POST</span><span style="color:#ABB2BF;">(</span><span style="color:#E06C75;font-style:italic;">req</span><span style="color:#ABB2BF;">) {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">prompt</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;"> await</span><span style="color:#E5C07B;"> req</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">json</span><span style="color:#ABB2BF;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这个函数实现处理 POST 请求，从请求的 JSON 正文中提取 <code>prompt</code>。然后，根据提示要求 OpenAI 进行流式完成：</p><div class="language-php line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">php</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">const</span><span style="color:#ABB2BF;"> response </span><span style="color:#56B6C2;">=</span><span style="color:#ABB2BF;"> await openai</span><span style="color:#ABB2BF;">.</span><span style="color:#61AFEF;">createCompletion</span><span style="color:#ABB2BF;">({</span></span>
<span class="line"><span style="color:#61AFEF;">    model: </span><span style="color:#98C379;">&quot;text-davinci-003&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">    stream: </span><span style="color:#D19A66;">true</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">    temperature: </span><span style="color:#D19A66;">0.6</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#61AFEF;">    prompt: </span><span style="color:#98C379;">\`Create three slogans for a business with unique features.</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">Business: Bookstore with cats</span></span>
<span class="line"><span style="color:#98C379;">Slogans: &quot;Purr-fect Pages&quot;, &quot;Books and Whiskers&quot;, &quot;Novels and Nuzzles&quot;</span></span>
<span class="line"><span style="color:#98C379;">Business: Gym with rock climbing</span></span>
<span class="line"><span style="color:#98C379;">Slogans: &quot;Peak Performance&quot;, &quot;Reach New Heights&quot;, &quot;Climb Your Way Fit&quot;</span></span>
<span class="line"><span style="color:#98C379;">Business: </span><span style="color:#E06C75;">\${prompt}</span></span>
<span class="line"><span style="color:#98C379;">Slogans:\`</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#ABB2BF;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>在 openai 客户端调用 <code>createCompletion</code> 方法，传入一个指定要使用的模型的对象 <code>text-davinci-003</code>，需要一个流响应 <code>stream: true</code>，AI的 <code>temperature</code> 设置（控制输出的随机性），以及AI应该响应的 <code>prompt</code>。</p><p>接下来，将响应转换为文本流：</p><div class="language-ini line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ini</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#98C379;">const </span><span style="color:#C678DD;">stream</span><span style="color:#ABB2BF;"> =</span><span style="color:#98C379;"> OpenAIStream(response)</span><span style="color:#7F848E;font-style:italic;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>通过调用 <code>OpenAIStream</code>，传入 <code>createCompletion</code> 调用的响应，将响应转换为流。最后，返回流作为响应返回给前端：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">return</span><span style="color:#ABB2BF;"> new StreamingTextResponse(</span><span style="color:#61AFEF;">stream</span><span style="color:#ABB2BF;">);</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>创建一个新的 <code>StreamingTextResponse</code>，传入流并返回它，并发送回客户端的响应。</p><blockquote><p>小结一下，上面代码设置了一个 <code>OpenAI API</code> 客户端，定义了一个处理 <code>POST</code> 请求的函数，在给定提示的情况下要求 <code>OpenAI</code> 进行流式完成，将响应转换为流，并将流作为响应返回。</p></blockquote><p>最后，将创建一个带有表单的客户端组件，用于收集用户的提示并流回完成结果。SDK 提供了 <code>useCompletion</code> 挂钩来处理用户输入和表单提交。该钩子提供了多个实用函数和状态变量，包括 <code>completion</code>、<code>input</code>、<code>handleInputChange</code> 和 <code>handleSubmit</code>。将 <code>app/page.js</code> 中的默认代码替换为以下代码：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#98C379;">&quot;use client&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">useCompletion</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;ai/react&quot;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> SloganGenerator</span><span style="color:#ABB2BF;">() {</span></span>
<span class="line"><span style="color:#C678DD;">    const</span><span style="color:#ABB2BF;"> { </span><span style="color:#E5C07B;">completion</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">input</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">handleInputChange</span><span style="color:#ABB2BF;">, </span><span style="color:#E5C07B;">handleSubmit</span><span style="color:#ABB2BF;"> } </span><span style="color:#56B6C2;">=</span></span>
<span class="line"><span style="color:#61AFEF;">        useCompletion</span><span style="color:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">    return</span><span style="color:#ABB2BF;"> (</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;font-style:italic;"> className</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;mx-auto w-full max-w-md py-24 flex flex-col stretch&quot;</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E06C75;">form</span><span style="color:#D19A66;font-style:italic;"> onSubmit</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">handleSubmit</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">                &lt;</span><span style="color:#E06C75;">input</span></span>
<span class="line"><span style="color:#D19A66;font-style:italic;">                    className</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;fixed w-full max-w-md bottom-0 border border-gray-300 rounded mb-8 shadow-xl p-2&quot;</span></span>
<span class="line"><span style="color:#D19A66;font-style:italic;">                    value</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">input</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#D19A66;font-style:italic;">                    placeholder</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;Describe your business...&quot;</span></span>
<span class="line"><span style="color:#D19A66;font-style:italic;">                    onChange</span><span style="color:#56B6C2;">=</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">handleInputChange</span><span style="color:#C678DD;">}</span></span>
<span class="line"><span style="color:#ABB2BF;">                /&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;/</span><span style="color:#E06C75;">form</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">            &lt;</span><span style="color:#E06C75;">div</span><span style="color:#D19A66;font-style:italic;"> className</span><span style="color:#56B6C2;">=</span><span style="color:#98C379;">&quot;whitespace-pre-wrap my-6&quot;</span><span style="color:#ABB2BF;">&gt;</span><span style="color:#C678DD;">{</span><span style="color:#E06C75;">completion</span><span style="color:#C678DD;">}</span><span style="color:#ABB2BF;">&lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">        &lt;/</span><span style="color:#E06C75;">div</span><span style="color:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="color:#ABB2BF;">    );</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><p>同样来分解一下这个 React 组件：</p><p>首先，从 <code>ai/react</code> 包中导入需要的钩子：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import</span><span style="color:#ABB2BF;"> { </span><span style="color:#E06C75;">useCompletion</span><span style="color:#ABB2BF;"> } </span><span style="color:#C678DD;">from</span><span style="color:#98C379;"> &quot;ai/react&quot;</span><span style="color:#ABB2BF;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>useCompletion</code> 是 <code>ai/react</code> 包提供的自定义 React 钩子。旨在处理用户输入和表单提交，以实现人工智能驱动的完成。</p><p>接下来定义一个功能组件 <code>SloganGenerator</code>：</p><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">export</span><span style="color:#C678DD;"> default</span><span style="color:#C678DD;"> function</span><span style="color:#61AFEF;"> SloganGenerator</span><span style="color:#ABB2BF;">() {</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这是在 React 中定义功能组件的标准方式。在这个组件中，将调用 <code>useCompletion</code> 钩子：</p><div class="language-scss line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">scss</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">const { completion, </span><span style="color:#E06C75;">input</span><span style="color:#ABB2BF;">, handleInputChange, handleSubmit } =</span></span>
<span class="line"><span style="color:#ABB2BF;">        useCompletion();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><code>useCompletion</code> 挂钩返回一个包含多个属性的对象：<code>completion</code>、<code>input</code>、<code>handleInputChange</code> 和 <code>handleSubmit</code>。 <code>completion</code> 是当前的完成结果，表示生成文本的字符串值。<code>input</code> 是用户输入字段的当前值。 <code>handleInputChange</code> 和 <code>handleSubmit</code> 是处理用户交互的函数，例如分别在输入字段中键入内容和提交表单。</p><p>接下来，主要是返回组件的 JSX。</p><p>到此可以启动应用程序并通过输入业务描述来进行测试，以实时查看人工智能生成的口号。</p><p>使用以下命令启动 Web 应用程序：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">npm</span><span style="color:#98C379;"> run</span><span style="color:#98C379;"> dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>已经使用 Vercel AI SDK 构建了一个流式标语生成器。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f47439aaa28646f291c9858b46a79b2c~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp?" alt="4.jpeg"></p><h2 id="流媒体的力量" tabindex="-1">流媒体的力量 <a class="header-anchor" href="#流媒体的力量" aria-label="Permalink to &quot;流媒体的力量&quot;">​</a></h2><p>Vercel AI SDK 的主要功能之一是支持流接口。ChatGPT 等流式会话文本 UI 在过去几个月中获得了广泛的流行，主要是因为它们可以提供更好的用户体验，尤其是在聊天机器人等会话应用程序中。</p><p>大型语言模型 (LLM) 非常强大，但在生成长输出时，它们可能会很慢。如果尝试构建传统的阻塞式 UI，用户可能会发现自己花了大量时间盯着加载的 Loading。流式 UI 可以通过在部分响应可用时显示它们来帮助缓解此问题。</p><p>SDK 提供了阻塞式和流式 UI 的示例。流式 UI 开始显示响应的速度比阻塞式 UI 快得多，阻塞式 UI 必须等待生成整个响应才能显示任何内容。</p><h2 id="缓存响应" tabindex="-1">缓存响应 <a class="header-anchor" href="#缓存响应" aria-label="Permalink to &quot;缓存响应&quot;">​</a></h2><p>根据正在构建的应用程序的类型，可能希望缓存从AI提供商收到的响应，至少是暂时的。Vercel AI SDK 提供了特殊的生命周期回调函数，可以用于此目的。<code>onCompletion</code> 回调特别有用，因为它会在流关闭时被调用，而这里就是可以缓存完整响应的地方。</p><p>SDK 提供了如何使用 <code>Vercel KV</code> 和 <code>Next.js</code> 将 OpenAI 响应缓存 <code>1 小时</code> 的示例，这对于频繁发出相同或相似请求的应用程序特别有用。</p><p><strong>项目地址</strong>：<a href="https://github.com/QuintionTang/vercel-ai-app" target="_blank" rel="noreferrer">github.com/QuintionTan…</a></p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>Vercel AI SDK 是用于构建人工智能驱动的用户界面的强大工具。它对流接口和响应缓存的支持，以及与 Next.js 等流行框架的兼容性，使其成为开发人员的多功能且高效的工具。无论是构建聊天机器人、标语生成器还是任何其他人工智能驱动的应用程序，Vercel AI SDK 都可以创建流畅且响应迅速的用户体验。</p>`,71),o=[l];function c(r,t,i,d,u,B){return a(),n("div",null,o)}const m=s(p,[["render",c]]);export{b as __pageData,m as default};
