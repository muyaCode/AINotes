import{_ as l,c as p,o as e,a4 as n,m as s,a}from"./chunks/framework.DBIahkuf.js";const o="/AINotes/assets/10488f9052c84f7a8df614da324f58a2.BWMc4muq.webp",t="/AINotes/assets/b931667204034fba9bdabdb5a29a4503.DPqkJtm1.webp",r="/AINotes/assets/29fda0d0ee3f4d90b9a7b5f98ce80ff5.-ySscbYq.webp",c="/AINotes/assets/c19d7ab493ef43de8ce5425fda5ff89a.DTDLYWtg.webp",i="/AINotes/assets/75cad49dc9ad45aca8423c368117a41d.DvZzQqc1.webp",u="/AINotes/assets/9e75fc7c22fd43eab6f7b958fff6641b.C2Y-03Oo.webp",y="/AINotes/assets/3c90ed16d9ce4172994fa6de5ac8a40e.D2GySIeL.webp",b="/AINotes/assets/cb9fdd928e5e4981b23525575926ab03.SnZc2eut.webp",m="/AINotes/assets/a13b9a791d7642c7b091623f3cb94cbe.COQFE3KO.webp",B="/AINotes/assets/cf21efaeecdc4f62980dfa3abe4ce901.CiD-98w2.webp",d="/AINotes/assets/890455f8d6b946c384c61d0d1bf5e96a.DGa0s_kU.webp",C="/AINotes/assets/5a29956e42d0418da8625338e73315a8.CoXzWnGs.webp",h="/AINotes/assets/ef29d847f24947388df67dad921c7c38.D79aEUGL.webp",A="/AINotes/assets/c5d299f559dd45c084cc3222c39e543e.C55OGhyS.webp",G=JSON.parse('{"title":"ChatGPT Plugins插件开发","description":"","frontmatter":{},"headers":[],"relativePath":"Document/问答类语言模型/ChatGPT注册使用和扩展/ChatGPT应用开发/ChatGPT Plugins插件开发.md","filePath":"Document/问答类语言模型/ChatGPT注册使用和扩展/ChatGPT应用开发/ChatGPT Plugins插件开发.md","lastUpdated":1689751952000}'),q={name:"Document/问答类语言模型/ChatGPT注册使用和扩展/ChatGPT应用开发/ChatGPT Plugins插件开发.md"},g=n(`<h1 id="chatgpt-plugins插件开发" tabindex="-1">ChatGPT Plugins插件开发 <a class="header-anchor" href="#chatgpt-plugins插件开发" aria-label="Permalink to &quot;ChatGPT Plugins插件开发&quot;">​</a></h1><p>OpenAI 现已经支持插件功能，可以预见这个插件平台将成为新时代的 Apple Store，将会带来巨大的被动流量，新时代的机会！</p><h3 id="中文开发指南" tabindex="-1">中文开发指南 <a class="header-anchor" href="#中文开发指南" aria-label="Permalink to &quot;中文开发指南&quot;">​</a></h3><p>指南中介绍了开发者申请开发插件的流程，与网页浏览器插件、代码解释器插件、Retrieval 插件、第三方插件等插件的功能、交互样式，详细介绍了开发流程，并通过“待办事项列表(to-do list)插件”的案例开发过程进行了演示。</p><ul><li><a href="https://mp.weixin.qq.com/s/AmNkiLOqJo7tEJZPX34oeg" target="_blank" rel="noreferrer">开发指南：ChatGPT 插件开发（上）</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzIzNjE2NTI3NQ==&amp;mid=2247485810&amp;idx=2&amp;sn=8bc4da188c39e1e2e9f808a362b6271f&amp;scene=21#wechat_redirect" target="_blank" rel="noreferrer">开发指南：ChatGPT 插件开发（下）</a></li></ul><p>——————————————————————————————————————————</p><p>如何使用 OpenAPI 规范记录 API，以及如何将插件连接到ChatGPT UI。</p><p>时，还提供了编写插件描述和调试插件的最佳实践。</p><p>通过定义 OpenAPI 规范以及清单文件，可以来创建一个待办事项列表插件。</p><p>这里还有基于 Vercel 平台的开发者模板，可以帮助您轻松开发和部署 ChatGPT 插件，并一键上线使用：<a href="https://github.com/yunwei37/ChatGPT-plugin-vercel-template" target="_blank" rel="noreferrer">github.com/yunwei37/Ch…</a></p><p>创建插件需要3个步骤：</p><ol><li>构建API</li><li>以OpenAPI yaml或JSON格式文档化API</li><li>创建一个JSON清单文件，用于为插件定义相关元数据</li></ol><p>本节的重点将是通过定义OpenAPI规范以及清单文件来创建一个待办事项列表插件。</p><p>可以在 OpenAI 的仓库中 浏览示例插件，涵盖多种用例和身份验证方法。</p><h2 id="插件清单" tabindex="-1">插件清单 <a class="header-anchor" href="#插件清单" aria-label="Permalink to &quot;插件清单&quot;">​</a></h2><p>每个插件都需要一个<code>ai-plugin.json</code>文件，它需要托管在 API 的域中。</p><p>例如，名为<code>example.com</code> 的公司将通过 <a href="https://example.com" target="_blank" rel="noreferrer">example.com</a> 域使插件JSON文件可访问，因为它们的API被托管在该域中。当您通过ChatGPT UI安装插件时，在后端我们会查找位于<code>/.well-known/ai-plugin.json</code>的文件。<code>/.well-known</code>文件夹是必需的，并且必须存在于您的域中，以便ChatGPT与您的插件连接。如果找不到文件，则无法安装插件。对于本地开发，您可以使用HTTP，但如果指向远程服务器，则需要使用HTTPS。</p><p>所需的<code>ai-plugin.json</code> 文件的最小定义如下：</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;schema_version&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;v1&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;name_for_human&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;TODO Plugin&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;name_for_model&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;todo&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;description_for_human&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Plugin for managing a TODO list. You can add, remove and view your TODOs.&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;description_for_model&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Plugin for managing a TODO list. You can add, remove and view your TODOs.&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;auth&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">        &quot;type&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;none&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;api&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">        &quot;type&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;openapi&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        &quot;url&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;http://localhost:3333/openapi.yaml&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">        &quot;is_user_authenticated&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;logo_url&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;http://localhost:3333/logo.png&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;contact_email&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;support@example.com&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;legal_info_url&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;http://www.example.com/legal&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>如果您想查看插件文件的所有可能选项，请参考以下定义。在命名插件时，请牢记我们的插件 指南，不遵守这些指南的插件将不会被批准放入插件商店。</p>`,20),D=s("table",null,[s("thead",null,[s("tr",null,[s("th",null,"Field"),s("th",null,"Type"),s("th",null,"Description / Options"),s("th",null,"Required")])]),s("tbody",null,[s("tr",null,[s("td",null,"schema_version"),s("td",null,"String"),s("td",null,"Manifest schema version"),s("td",null,"✅")]),s("tr",null,[s("td",null,"name_for_model"),s("td",null,"String"),s("td",null,"Name the model will use to target the plugin (no spaces allowed, only letters and numbers). 50 character max."),s("td",null,"✅")]),s("tr",null,[s("td",null,"name_for_human"),s("td",null,"String"),s("td",null,"Human-readable name, such as the full company name. 20 character max."),s("td",null,"✅")]),s("tr",null,[s("td",null,"description_for_model"),s("td",null,"String"),s("td",null,"Description better tailored to the model, such as token context length considerations or keyword usage for improved plugin prompting. 8,000 character max."),s("td",null,"✅")]),s("tr",null,[s("td",null,"description_for_human"),s("td",null,"String"),s("td",null,"Human-readable description of the plugin. 100 character max."),s("td",null,"✅")]),s("tr",null,[s("td",null,"auth"),s("td",null,"ManifestAuth"),s("td",null,"Authentication schema"),s("td",null,"✅")]),s("tr",null,[s("td",null,"api"),s("td",null,"Object"),s("td",null,"API specification"),s("td",null,"✅")]),s("tr",null,[s("td",null,"logo_url"),s("td",null,"String"),s("td",null,"URL used to fetch the logo. Suggested size: 512 x 512. Transparent backgrounds are supported."),s("td",null,"✅")]),s("tr",null,[s("td",null,"contact_email"),s("td",null,"String"),s("td",null,"Email contact for safety/moderation, support, and deactivation"),s("td",null,"✅")]),s("tr",null,[s("td",null,"legal_info_url"),s("td",null,"String"),s("td",null,"Redirect URL for users to view plugin information"),s("td",null,"✅")]),s("tr",null,[s("td",null,"HttpAuthorizationType"),s("td",null,"HttpAuthorizationType"),s("td",null,'"bearer" or "basic"'),s("td",null,"✅")]),s("tr",null,[s("td",null,"ManifestAuthType"),s("td",null,"ManifestAuthType"),s("td",null,'"none", "user_http", "service_http", or "oauth"'),s("td")]),s("tr",null,[s("td"),s("td"),s("td"),s("td")]),s("tr",null,[s("td",null,"interface BaseManifestAuth"),s("td",null,"BaseManifestAuth"),s("td",null,"type: ManifestAuthType; instructions: string;"),s("td")]),s("tr",null,[s("td"),s("td"),s("td"),s("td")]),s("tr",null,[s("td",null,"ManifestNoAuth"),s("td",null,"ManifestNoAuth"),s("td",{"type:":"","none,":""},"No authentication required: BaseManifestAuth &"),s("td")]),s("tr",null,[s("td"),s("td"),s("td"),s("td")]),s("tr",null,[s("td",null,"ManifestAuth"),s("td",null,"ManifestAuth"),s("td",null,"ManifestNoAuth, ManifestServiceHttpAuth, ManifestUserHttpAuth, ManifestOAuthAuth"),s("td")]),s("tr",null,[s("td"),s("td"),s("td"),s("td")])])],-1),_=n(`<p>以下是使用不同身份验证方法的示例：</p><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#7F848E;font-style:italic;"># App-level API keys</span></span>
<span class="line"><span style="color:#56B6C2;">type</span><span style="color:#98C379;"> ManifestServiceHttpAuth</span><span style="color:#98C379;">  =</span><span style="color:#98C379;"> BaseManifestAuth</span><span style="color:#ABB2BF;"> &amp; {</span></span>
<span class="line"><span style="color:#56B6C2;">  type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;service_http&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">  authorization_type:</span><span style="color:#98C379;"> HttpAuthorizationType</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">  verification_tokens:</span><span style="color:#98C379;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    [service: string]</span><span style="color:#61AFEF;">?:</span><span style="color:#98C379;"> string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;"># User-level HTTP authentication</span></span>
<span class="line"><span style="color:#56B6C2;">type</span><span style="color:#98C379;"> ManifestUserHttpAuth</span><span style="color:#98C379;">  =</span><span style="color:#98C379;"> BaseManifestAuth</span><span style="color:#ABB2BF;"> &amp; {</span></span>
<span class="line"><span style="color:#56B6C2;">  type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;user_http&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#61AFEF;">  authorization_type:</span><span style="color:#98C379;"> HttpAuthorizationType</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#56B6C2;">type</span><span style="color:#98C379;"> ManifestOAuthAuth</span><span style="color:#98C379;">  =</span><span style="color:#98C379;"> BaseManifestAuth</span><span style="color:#ABB2BF;"> &amp; {</span></span>
<span class="line"><span style="color:#56B6C2;">  type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;oauth&#39;</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  # OAuth URL where a user is directed to for the OAuth authentication flow to begin.</span></span>
<span class="line"><span style="color:#61AFEF;">  client_url:</span><span style="color:#98C379;"> string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  # OAuth scopes required to accomplish operations on the user&#39;s behalf.</span></span>
<span class="line"><span style="color:#61AFEF;">  scope:</span><span style="color:#98C379;"> string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  # Endpoint used to exchange OAuth code with access token.</span></span>
<span class="line"><span style="color:#61AFEF;">  authorization_url:</span><span style="color:#98C379;"> string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  # When exchanging OAuth code with access token, the expected header &#39;content-type&#39;. For example: &#39;content-type: application/json&#39;</span></span>
<span class="line"><span style="color:#61AFEF;">  authorization_content_type:</span><span style="color:#98C379;"> string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7F848E;font-style:italic;">  # When registering the OAuth client ID and secrets, the plugin service will surface a unique token.</span></span>
<span class="line"><span style="color:#61AFEF;">  verification_tokens:</span><span style="color:#98C379;"> {</span></span>
<span class="line"><span style="color:#ABB2BF;">    [service: string]</span><span style="color:#61AFEF;">?:</span><span style="color:#98C379;"> string</span><span style="color:#ABB2BF;">;</span></span>
<span class="line"><span style="color:#ABB2BF;">  };</span></span>
<span class="line"><span style="color:#ABB2BF;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div><p>上述清单文件中某些字段的长度有限制，这些限制可能会发生变化。我们还对 API 响应正文强制实施 10 万字符的最大值，这个值也可能会随时间变化而改变。</p><p>总的来说，最佳实践是尽可能简洁地描述和响应，因为模型有限的上下文窗口。</p><h2 id="openapi-定义" tabindex="-1">OpenAPI 定义 <a class="header-anchor" href="#openapi-定义" aria-label="Permalink to &quot;OpenAPI 定义&quot;">​</a></h2><p>下一步是构建 OpenAPI规范 来记录API。ChatGPT模型除了OpenAPI规范和清单文件中定义的内容之外，不知道关于您的API的任何信息。这意味着如果您有一个广泛的API，您不需要将所有功能暴露给模型，可以选择特定的端点。例如，如果您有一个社交媒体API，您可能希望让模型通过GET请求访问站点内容，但防止模型能够评论用户的帖子，以减少垃圾邮件的机会。</p><p>OpenAPI规范是包装在您的API之上的外壳。基本的OpenAPI规范将如下所示：</p><div class="language-less line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">less</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">openapi: 3</span><span style="color:#D19A66;">.0.1</span></span>
<span class="line"><span style="color:#C678DD;">info:</span></span>
<span class="line"><span style="color:#E06C75;">  title</span><span style="color:#C678DD;">: TODO Plugin</span></span>
<span class="line"><span style="color:#C678DD;">  description: A plugin that allows the user to create and manage </span><span style="color:#E06C75;">a</span><span style="color:#C678DD;"> TODO list using ChatGPT</span><span style="color:#D19A66;">.</span></span>
<span class="line"><span style="color:#C678DD;">  version: &#39;v1&#39;</span></span>
<span class="line"><span style="color:#C678DD;">servers:</span></span>
<span class="line"><span style="color:#C678DD;">  - url: http:</span><span style="color:#7F848E;font-style:italic;">//localhost:3333</span></span>
<span class="line"><span style="color:#C678DD;">paths:</span></span>
<span class="line"><span style="color:#C678DD;">  /todos:</span></span>
<span class="line"><span style="color:#C678DD;">    get:</span></span>
<span class="line"><span style="color:#C678DD;">      operationId: getTodos</span></span>
<span class="line"><span style="color:#E06C75;">      summary</span><span style="color:#C678DD;">: Get the list of todos</span></span>
<span class="line"><span style="color:#C678DD;">      responses:</span></span>
<span class="line"><span style="color:#C678DD;">        &quot;200&quot;:</span></span>
<span class="line"><span style="color:#C678DD;">          description: OK</span></span>
<span class="line"><span style="color:#E06C75;">          content</span><span style="color:#C678DD;">:</span></span>
<span class="line"><span style="color:#C678DD;">            application/json:</span></span>
<span class="line"><span style="color:#C678DD;">              schema:</span></span>
<span class="line"><span style="color:#C678DD;">                $ref: &#39;</span><span style="color:#61AFEF;">#</span><span style="color:#C678DD;">/components/schemas/getTodosResponse&#39;</span></span>
<span class="line"><span style="color:#C678DD;">components:</span></span>
<span class="line"><span style="color:#C678DD;">  schemas:</span></span>
<span class="line"><span style="color:#C678DD;">    getTodosResponse:</span></span>
<span class="line"><span style="color:#C678DD;">      type: </span><span style="color:#E06C75;">object</span></span>
<span class="line"><span style="color:#C678DD;">      properties:</span></span>
<span class="line"><span style="color:#C678DD;">        todos:</span></span>
<span class="line"><span style="color:#C678DD;">          type: array</span></span>
<span class="line"><span style="color:#C678DD;">          items:</span></span>
<span class="line"><span style="color:#C678DD;">            type: string</span></span>
<span class="line"><span style="color:#C678DD;">          description: The list of todos</span><span style="color:#D19A66;">.</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>我们首先定义规范版本、标题、描述和版本号。当在 ChatGPT 中运行查询时，它将查看在信息部分中定义的描述，以确定插件是否与用户查询相关。您可以在编写描述部分了解更多提示信息。</p><p>请记住以下 OpenAPI 规范的限制，这些限制可能会发生变化：</p><ul><li>API 规范中每个 API 端点描述 / 摘要字段的最大字符数为200个字符</li><li>API规范中每个API参数描述字段的最大字符数为200个字符</li></ul><p>由于我们正在本地运行此示例，因此我们希望将服务器设置为指向您的本地主机 URL 。其余的 OpenAPI 规范遵循传统的 OpenAPI 格式，您可以通过各种在线资源 了解有关OpenAPI格式的更多信息。还有许多工具可以根据您的基础 API 代码自动生成 OpenAPI 规范。</p><h2 id="运行插件" tabindex="-1">运行插件 <a class="header-anchor" href="#运行插件" aria-label="Permalink to &quot;运行插件&quot;">​</a></h2><p>创建API、清单文件和OpenAPI规范之后，您现在可以通过ChatGPT UI连接插件。您的插件可能在本地开发环境或远程服务器上运行。</p><p>如果您有一个本地版本的API正在运行，您可以将插件界面指向您的本地主机。要将插件与ChatGPT连接，请导航到插件商店并选择“开发您自己的插件”。输入您的本地主机和端口号（例如<code>localhost:3333</code>）。请注意，目前仅支持<code>none</code>认证类型进行本地主机开发。</p><p>如果插件正在远程服务器上运行，则需要首先选择“开发您自己的插件”进行设置，然后选择“安装未经验证的插件”进行安装。您只需将插件清单文件添加到<code>yourdomain.com/.well-known/</code>路径并开始测试API即可。但是，对于清单文件的后续更改，您将不得不将新更改部署到公共站点上，这可能需要很长时间。在这种情况下，我们建议设置本地服务器以充当API的代理。这样，您可以快速原型化OpenAPI规范和清单文件的更改。</p><h2 id="编写插件描述" tabindex="-1">编写插件描述 <a class="header-anchor" href="#编写插件描述" aria-label="Permalink to &quot;编写插件描述&quot;">​</a></h2><p>当用户提出一个可能是插件请求的查询时，模型会查看OpenAPI规范中端点的描述以及清单文件中的“description_for_model”。与提示其他语言模型一样，您需要尝试多个提示和描述，以查看哪个效果最好。</p><p>OpenAPI规范本身是提供有关API各种细节的好地方，例如可用的功能以及其参数等。除了为每个字段使用富有表现力的、信息丰富的名称外，规范还可以针对每个属性包含“描述”字段。这些描述可用于提供自然语言描述，例如功能的作用或查询字段期望的信息。模型将能够看到这些描述，并指导其使用API。如果某个字段仅限于某些值，您还可以提供具有描述性类别名称的“枚举”。</p><p>“description_for_model”属性为您提供了自由，使您可以指示模型通常如何使用您的插件。总的来说，ChatGPT背后的语言模型非常擅长理解自然语言并遵循指示。因此，这是一个很好的地方，可以放置有关您的插件的一般说明以及模型应如何正确使用它的说明。使用自然语言，最好是简洁而又描述性和客观的语气。您可以查看一些示例，以了解这应该是什么样子。我们建议用“Plugin for…”开头，然后列出您的API提供的所有功能。</p><h3 id="最佳实践" tabindex="-1"><strong>最佳实践</strong> <a class="header-anchor" href="#最佳实践" aria-label="Permalink to &quot;**最佳实践**&quot;">​</a></h3><p>以下是编写<code>description_for_model</code>和OpenAPI规范中的描述以及设计API响应时应遵循的最佳实践：</p><ol><li><p>描述不应尝试控制ChatGPT的情绪、个性或确切的响应。ChatGPT的设计目的是编写适当的插件响应。</p><p><em>不良示例</em>:</p><blockquote><p>当用户要查看待办事项清单时，总是回复“我能找到您的待办事项清单！您有[x]个待办事项：[列出待办事项]。如果您想要，我可以添加更多待办事项！”</p></blockquote><p><em>良好示例</em>:</p><blockquote><p>[不需要提供描述]</p></blockquote></li><li><p>描述不应鼓励ChatGPT在用户未要求使用插件的特定服务类别时使用插件。</p><p><em>不良示例</em>:</p><blockquote><p>每当用户提到任何类型的任务或计划时，都要问他们是否想要使用 TODO 插件将某些内容添加到他们的待办事项清单中。</p></blockquote><p><em>良好示例</em>:</p><blockquote><p>TODO 列表可以添加、删除和查看用户的待办事项。</p></blockquote></li><li><p>描述不应规定 ChatGPT 使用插件的具体触发器。ChatGPT 的设计是在适当时自动使用插件。</p><p><em>不良示例</em>:</p><blockquote><p>当用户提到任务时，请回复：“您是否希望我将此添加到您的待办事项清单中？说 ‘是’ 继续。”</p></blockquote><p><em>良好示例</em>:</p></li></ol><blockquote><p>[不需要提供描述]</p></blockquote>`,24),F=s("ol",{"todos:":"","[买东西,":"","遛狗]":""},[s("li",null,[s("p",null,"插件 API 响应应返回原始数据而不是自然语言响应，除非必要。ChatGPT 将使用返回的数据提供自己的自然语言响应。"),s("p",null,[s("em",null,"不良示例"),a(":")]),s("blockquote",null,[s("p",null,"我能找到您的待办事项清单！您有2个待办事项：买东西和遛狗。如果您想要，我可以添加更多待办事项！")]),s("p",null,[s("em",null,"良好示例"),a(":")]),s("blockquote",null,[s("p")])])],-1),f=n('<h2 id="调试插件" tabindex="-1">调试插件 <a class="header-anchor" href="#调试插件" aria-label="Permalink to &quot;调试插件&quot;">​</a></h2><p>默认情况下，聊天不会显示插件调用和未向用户显示的其他信息。为了更全面地了解模型与您的插件的交互方式，您可以在与插件交互后单击插件名称后面的向下箭头以查看请求和响应。</p><p>模型对插件的调用通常包括来自模型的包含 JSON 类参数的消息，这些参数被发送到插件，随后是插件的响应，最后是模型利用插件返回的信息发送的消息。</p><p>如果您正在开发一个本地主机插件，您还可以通过转到“设置”并切换“打开插件开发工具”来打开开发人员控制台。从那里，您可以看到更详细的日志和 “刷新插件” ，它会重新获取插件和OpenAPI规范。</p><blockquote><p>本文介绍了如何使用OpenAPI规范记录API，以及如何将插件连接到ChatGPT UI。同时，还提供了编写插件描述和调试插件的最佳实践。OpenAPI规范包括版本、标题、描述和版本号等基本信息，还可以为每个属性提供自然语言描述，例如功能的作用或查询字段期望的信息。调试插件可以通过向下箭头查看请求和响应，或通过开发人员控制台查看更详细的日志。</p></blockquote><h2 id="开发模板" tabindex="-1">开发模板 <a class="header-anchor" href="#开发模板" aria-label="Permalink to &quot;开发模板&quot;">​</a></h2><p>这里还有一个基于 Vercel 平台的 ChatGPT 插件起始模板，可以帮助您轻松地部署 ChatGPT 插件，并实现一键上线服务：<a href="https://github.com/yunwei37/ChatGPT-plugin-vercel-template" target="_blank" rel="noreferrer">github.com/yunwei37/Ch…</a></p><h2 id="_1、前言" tabindex="-1">1、前言 <a class="header-anchor" href="#_1、前言" aria-label="Permalink to &quot;1、前言&quot;">​</a></h2><p>5月13日早上醒来发现ChatGPT官网迎来了一波更新，页面有所调整，而且在settings页面有了关于插件配置的切换。</p><p><img src="'+o+'" alt="image.png"></p><p>如图所示OpenAI官网发布，将在下周针对所有ChatGPT Plus用户推出网络浏览和插件权限。我的猜测是一方面最近谷歌AI的发布会可以访问互联网，访问插件等等，如果真如发布会，那比3月份发布时的提升真的太大了，以claude.ai 宣布将文本上下文限制从 9K 扩展到 100K！而且在3月中旬发布ChatGPT-4模型后，新东西出来也比较慢了，种种迹象都在表明OpenAI也面临着一点点的压力。</p><p>希望多几家能与OpenAI公司竞争的企业，这样才能促进OpenAI更强劲的爆发。 5月12日拿到了插件开发的权限，当天工作比较忙，就没时间来尝试，于是今天使用了一下。接下来，我会根据我的使用情况来学习一下ChatGPT Plugins官网的插件开发机制。官网的插件我昨天也体验了一番效果还是非常棒的，有兴趣的可以来看看我的体验文章 <a href="https://mp.weixin.qq.com/s/SKycfpMMRFwuArJe6SN5Xg" target="_blank" rel="noreferrer">mp.weixin.qq.com/s/SKycfpMMR…</a> 。</p><h2 id="_2、chatgpt-plugins插件" tabindex="-1">2、ChatGPT Plugins插件 <a class="header-anchor" href="#_2、chatgpt-plugins插件" aria-label="Permalink to &quot;2、ChatGPT Plugins插件&quot;">​</a></h2><p><img src="'+t+'" alt="image.png"></p><p>目前看官网的插件如雨后春笋，感觉很快会迎来一波量的变化，昨天上午看还是四十几个，今天看就是54个。下周可能所有Plus用户都可以体验插件，将会对插件迎来一波压力。 看到了自己有了插件的开发权限，于是就顺手来体验一下，看看插件到底是怎么开发出来的呢</p><p>OpenAI的插件将ChatGPT连接到第三方应用程序。这些插件使 ChatGPT 能够与开发人员定义的 API 进行交互，从而增强 ChatGPT 的功能并允许它执行广泛的操作，例如：</p><ul><li>检索实时信息;例如，体育比分、股票价格、最新消息等。</li><li>检索知识库信息;例如，公司文档、个人笔记等。</li><li>代表用户执行操作;例如，预订航班、订购食物等。</li><li>。。。。。。</li></ul><h2 id="_3、上手调试体验插件" tabindex="-1">3、上手调试体验插件 <a class="header-anchor" href="#_3、上手调试体验插件" aria-label="Permalink to &quot;3、上手调试体验插件&quot;">​</a></h2><h3 id="_3-1、找到测试项目" tabindex="-1">3.1、找到测试项目 <a class="header-anchor" href="#_3-1、找到测试项目" aria-label="Permalink to &quot;3.1、找到测试项目&quot;">​</a></h3><p>首先我直接来到OpenAI的官网 <a href="https://platform.openai.com/docs/plugins/examples" target="_blank" rel="noreferrer">platform.openai.com/docs/plugin…</a> 。 发现demo例子的第一个就是一个最简单的仓库。</p><p><img src="'+r+`" alt="image.png"></p><p>看到了 Plugin quickstart，顺手找到了github <a href="https://github.com/openai/plugins-quickstart" target="_blank" rel="noreferrer">github.com/openai/plug…</a> 一看是OpenAI官网开源的，啥也不说了，直接git clone开撸代码吧。</p><h4 id="_3-2、下载运行项目" tabindex="-1">3.2、下载运行项目 <a class="header-anchor" href="#_3-2、下载运行项目" aria-label="Permalink to &quot;3.2、下载运行项目&quot;">​</a></h4><p>将项目下载到本地之后，便按照readme进行安装即可</p><ul><li>3.2.1、首先保证python已经在本机安装</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">python</span><span style="color:#D19A66;"> --version</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">pip</span><span style="color:#D19A66;"> -V</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><img src="`+c+'" alt="image.png"></p><ul><li>3.2.2、 安装依赖</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">pip</span><span style="color:#98C379;"> install</span><span style="color:#D19A66;"> -r</span><span style="color:#98C379;"> requirements.txt</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+i+'" alt="image.png"></p><ul><li>3.2.3、运行调试项目</li></ul><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#61AFEF;">python</span><span style="color:#98C379;"> main.py</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><img src="'+u+'" alt="image.png"></p><ul><li>3.2.4、对接ChatGPT 官网</li></ul><p><img src="'+y+'" alt="image.png"></p><p>然后将 <code>localhost:5003</code> 输入到domain中，然后右下角点击。</p><p><img src="'+b+'" alt="image.png"></p><p>再点击安装，到Chat便可以选择插件进行聊天使用了</p><p><img src="'+m+'" alt="image.png"></p><h2 id="_4、尝试使用自己的插件" tabindex="-1">4、尝试使用自己的插件 <a class="header-anchor" href="#_4、尝试使用自己的插件" aria-label="Permalink to &quot;4、尝试使用自己的插件&quot;">​</a></h2><p>查看跟插件进行对话是成功的。</p><p><img src="'+B+'" alt="image.png"></p><p>再来查看调试日志</p><p><img src="'+d+'" alt="image.png"></p><p>通过本地接口也可以获取数据了</p><p><img src="'+C+'" alt="image.png"></p><p>基本上已经证明我们的插件调试成功了。</p><p><img src="'+h+'" alt="image.png"></p><p>最后突然想到自然语言运用恰当直接操作选择数据接口，有利有弊吧。</p><h2 id="_5、项目结构解析" tabindex="-1">5、项目结构解析 <a class="header-anchor" href="#_5、项目结构解析" aria-label="Permalink to &quot;5、项目结构解析&quot;">​</a></h2><p><img src="'+A+`" alt="image.png"></p><p>如上图所示，我标注箭头的文件大家看了基本都懂，可以忽略了。重要文件就三个</p><ul><li>.wll-known/ai-plugin.json</li><li>openapi.yaml</li><li>main.py</li></ul><h3 id="_5、1-ai-plugin-json" tabindex="-1">5、1 ai-plugin.json <a class="header-anchor" href="#_5、1-ai-plugin-json" aria-label="Permalink to &quot;5、1 ai-plugin.json&quot;">​</a></h3><p>先来查看示例</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#ABB2BF;">{</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;schema_version&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;v1&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;name_for_human&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;TODO Plugin (no auth)&quot;</span><span style="color:#ABB2BF;">, </span></span>
<span class="line"><span style="color:#E06C75;">    &quot;name_for_model&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;todo&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;description_for_human&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Plugin for managing a TODO list, you can add, remove and view your TODOs.&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;description_for_model&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;Plugin for managing a TODO list, you can add, remove and view your TODOs.&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;auth&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">      &quot;type&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;none&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;api&quot;</span><span style="color:#ABB2BF;">: {</span></span>
<span class="line"><span style="color:#E06C75;">      &quot;type&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;openapi&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      &quot;url&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;http://localhost:5003/openapi.yaml&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">      &quot;is_user_authenticated&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">false</span></span>
<span class="line"><span style="color:#ABB2BF;">    },</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;logo_url&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;http://localhost:5003/logo.png&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;contact_email&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;legal@example.com&quot;</span><span style="color:#ABB2BF;">,</span></span>
<span class="line"><span style="color:#E06C75;">    &quot;legal_info_url&quot;</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&quot;http://example.com/legal&quot;</span></span>
<span class="line"><span style="color:#ABB2BF;">  }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>这里最重要的一个配置便是：auth:身份验证架构 (&quot;type&quot;: &quot;none&quot;) 。</p><p>我上面使用的便是没有身份验证的机制，如果我们的插件api接口时面向所有用户开发，需要身份的验证，这里便可以这样设置。如果需要身份验证可以设置为(&quot;type&quot;: &quot;service_http&quot;),这里就简单一提，留给后面再仔细学习。</p><h3 id="_5-2、openapi-yaml" tabindex="-1">5.2、openapi.yaml <a class="header-anchor" href="#_5-2、openapi-yaml" aria-label="Permalink to &quot;5.2、openapi.yaml&quot;">​</a></h3><div class="language-yaml line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#E06C75;">openapi</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">3.0.1</span></span>
<span class="line"><span style="color:#E06C75;">info</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">  title</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">TODO Plugin</span></span>
<span class="line"><span style="color:#E06C75;">  description</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">A plugin that allows the user to create and manage a TODO list using ChatGPT. If you do not know the user&#39;s username, ask them first before making queries to the plugin. Otherwise, use the username &quot;global&quot;.</span></span>
<span class="line"><span style="color:#E06C75;">  version</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;v1&#39;</span></span>
<span class="line"><span style="color:#E06C75;">servers</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">  - </span><span style="color:#E06C75;">url</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">http://localhost:5003</span></span>
<span class="line"><span style="color:#E06C75;">paths</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">  /todos/{username}</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">    get</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">      operationId</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">getTodos</span></span>
<span class="line"><span style="color:#E06C75;">      summary</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">Get the list of todos</span></span>
<span class="line"><span style="color:#E06C75;">      parameters</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">      - </span><span style="color:#E06C75;">in</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">path</span></span>
<span class="line"><span style="color:#E06C75;">        name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">username</span></span>
<span class="line"><span style="color:#E06C75;">        schema</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">            type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">string</span></span>
<span class="line"><span style="color:#E06C75;">        required</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#E06C75;">        description</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">The name of the user.</span></span>
<span class="line"><span style="color:#E06C75;">      responses</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#98C379;">        &quot;200&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">          description</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">OK</span></span>
<span class="line"><span style="color:#E06C75;">          content</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">            application/json</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">              schema</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">                $ref</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;#/components/schemas/getTodosResponse&#39;</span></span>
<span class="line"><span style="color:#E06C75;">    post</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">      operationId</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">addTodo</span></span>
<span class="line"><span style="color:#E06C75;">      summary</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">Add a todo to the list</span></span>
<span class="line"><span style="color:#E06C75;">      parameters</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">      - </span><span style="color:#E06C75;">in</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">path</span></span>
<span class="line"><span style="color:#E06C75;">        name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">username</span></span>
<span class="line"><span style="color:#E06C75;">        schema</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">            type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">string</span></span>
<span class="line"><span style="color:#E06C75;">        required</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#E06C75;">        description</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">The name of the user.</span></span>
<span class="line"><span style="color:#E06C75;">      requestBody</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">        required</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#E06C75;">        content</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">          application/json</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">            schema</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">              $ref</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;#/components/schemas/addTodoRequest&#39;</span></span>
<span class="line"><span style="color:#E06C75;">      responses</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#98C379;">        &quot;200&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">          description</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">OK</span></span>
<span class="line"><span style="color:#E06C75;">    delete</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">      operationId</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">deleteTodo</span></span>
<span class="line"><span style="color:#E06C75;">      summary</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">Delete a todo from the list</span></span>
<span class="line"><span style="color:#E06C75;">      parameters</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">      - </span><span style="color:#E06C75;">in</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">path</span></span>
<span class="line"><span style="color:#E06C75;">        name</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">username</span></span>
<span class="line"><span style="color:#E06C75;">        schema</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">            type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">string</span></span>
<span class="line"><span style="color:#E06C75;">        required</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#E06C75;">        description</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">The name of the user.</span></span>
<span class="line"><span style="color:#E06C75;">      requestBody</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">        required</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#E06C75;">        content</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">          application/json</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">            schema</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">              $ref</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">&#39;#/components/schemas/deleteTodoRequest&#39;</span></span>
<span class="line"><span style="color:#E06C75;">      responses</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#98C379;">        &quot;200&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">          description</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">OK</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">components</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">  schemas</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">    getTodosResponse</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">      type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">object</span></span>
<span class="line"><span style="color:#E06C75;">      properties</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">        todos</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">          type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">array</span></span>
<span class="line"><span style="color:#E06C75;">          items</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">            type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">string</span></span>
<span class="line"><span style="color:#E06C75;">          description</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">The list of todos.</span></span>
<span class="line"><span style="color:#E06C75;">    addTodoRequest</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">      type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">object</span></span>
<span class="line"><span style="color:#E06C75;">      required</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">      - </span><span style="color:#98C379;">todo</span></span>
<span class="line"><span style="color:#E06C75;">      properties</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">        todo</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">          type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">string</span></span>
<span class="line"><span style="color:#E06C75;">          description</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">The todo to add to the list.</span></span>
<span class="line"><span style="color:#E06C75;">          required</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span></span>
<span class="line"><span style="color:#E06C75;">    deleteTodoRequest</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">      type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">object</span></span>
<span class="line"><span style="color:#E06C75;">      required</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">      - </span><span style="color:#98C379;">todo_idx</span></span>
<span class="line"><span style="color:#E06C75;">      properties</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">        todo_idx</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#E06C75;">          type</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">integer</span></span>
<span class="line"><span style="color:#E06C75;">          description</span><span style="color:#ABB2BF;">: </span><span style="color:#98C379;">The index of the todo to delete.</span></span>
<span class="line"><span style="color:#E06C75;">          required</span><span style="color:#ABB2BF;">: </span><span style="color:#D19A66;">true</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br></div></div><p>简单看到下面这个文件，感觉就是openai定义的一套接口规范，插件的接口需要按照这样的规范来定义。 而且这里的规范，要跟代码里实现的接口要保持一致。下面来看看代码</p><h3 id="_5-3、main-py" tabindex="-1">5.3、main.py <a class="header-anchor" href="#_5-3、main-py" aria-label="Permalink to &quot;5.3、main.py&quot;">​</a></h3><div class="language-less line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">less</span><pre class="shiki one-dark-pro vp-code"><code><span class="line"><span style="color:#C678DD;">import json</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">import quart</span></span>
<span class="line"><span style="color:#C678DD;">import quart_cors</span></span>
<span class="line"><span style="color:#C678DD;">from quart import request</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C678DD;">app = quart_cors</span><span style="color:#D19A66;">.cors</span><span style="color:#C678DD;">(quart</span><span style="color:#D19A66;">.Quart</span><span style="color:#C678DD;">(__name__), allow_origin=&quot;https:</span><span style="color:#7F848E;font-style:italic;">//chat.openai.com&quot;)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#61AFEF;">#</span><span style="color:#C678DD;"> Keep </span><span style="color:#E06C75;">track</span><span style="color:#C678DD;"> of todo&#39;</span><span style="color:#E06C75;">s</span><span style="color:#D19A66;">.</span><span style="color:#C678DD;"> Does not persist if Python session is restarted</span><span style="color:#D19A66;">.</span></span>
<span class="line"><span style="color:#C678DD;">_TODOS = {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">@app</span><span style="color:#98C379;">.post</span><span style="color:#C678DD;">(&quot;</span><span style="color:#56B6C2;">/</span><span style="color:#C678DD;">todos</span><span style="color:#56B6C2;">/</span><span style="color:#C678DD;">&lt;string:username&gt;&quot;)</span></span>
<span class="line"><span style="color:#98C379;">async</span><span style="color:#98C379;"> def</span><span style="color:#98C379;"> add_todo</span><span style="color:#C678DD;">(username)</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#98C379;">    request</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> await</span><span style="color:#98C379;"> quart.request.get_json</span><span style="color:#C678DD;">(force=True)</span></span>
<span class="line"><span style="color:#98C379;">    if</span><span style="color:#98C379;"> username</span><span style="color:#98C379;"> not</span><span style="color:#98C379;"> in</span><span style="color:#98C379;"> _TODOS</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#98C379;">        _TODOS[username]</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> []</span></span>
<span class="line"><span style="color:#98C379;">    _TODOS[username].append</span><span style="color:#C678DD;">(request[&quot;todo&quot;])</span></span>
<span class="line"><span style="color:#98C379;">    print</span><span style="color:#C678DD;">(_TODOS)</span></span>
<span class="line"><span style="color:#98C379;">    return</span><span style="color:#98C379;"> quart.Response</span><span style="color:#C678DD;">(response=&#39;OK&#39;, status=</span><span style="color:#D19A66;">200</span><span style="color:#C678DD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">@app</span><span style="color:#98C379;">.get</span><span style="color:#C678DD;">(&quot;</span><span style="color:#56B6C2;">/</span><span style="color:#C678DD;">todos</span><span style="color:#56B6C2;">/</span><span style="color:#C678DD;">&lt;string:username&gt;&quot;)</span></span>
<span class="line"><span style="color:#98C379;">async</span><span style="color:#98C379;"> def</span><span style="color:#98C379;"> get_todos</span><span style="color:#C678DD;">(username)</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#98C379;">    print</span><span style="color:#C678DD;">(username)</span></span>
<span class="line"><span style="color:#98C379;">    todos</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> _TODOS.get</span><span style="color:#C678DD;">(username, [])</span></span>
<span class="line"><span style="color:#98C379;">    print</span><span style="color:#C678DD;">(todos)</span></span>
<span class="line"><span style="color:#98C379;">    return</span><span style="color:#98C379;"> quart.Response</span><span style="color:#C678DD;">(response=json.dumps(_TODOS.get(username, [])), status=</span><span style="color:#D19A66;">200</span><span style="color:#C678DD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">@app</span><span style="color:#98C379;">.delete</span><span style="color:#C678DD;">(&quot;</span><span style="color:#56B6C2;">/</span><span style="color:#C678DD;">todos</span><span style="color:#56B6C2;">/</span><span style="color:#C678DD;">&lt;string:username&gt;&quot;)</span></span>
<span class="line"><span style="color:#98C379;">async</span><span style="color:#98C379;"> def</span><span style="color:#98C379;"> delete_todo</span><span style="color:#C678DD;">(username)</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#98C379;">    request</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> await</span><span style="color:#98C379;"> quart.request.get_json</span><span style="color:#C678DD;">(force=True)</span></span>
<span class="line"><span style="color:#98C379;">    todo_idx</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> request[&quot;todo_idx&quot;]</span></span>
<span class="line"><span style="color:#98C379;">    #</span><span style="color:#98C379;"> fail</span><span style="color:#98C379;"> silently</span><span style="color:#C678DD;">, </span><span style="color:#98C379;">it&#39;s a simple plugin</span></span>
<span class="line"><span style="color:#98C379;">    if</span><span style="color:#D19A66;"> 0</span><span style="color:#98C379;"> &lt;=</span><span style="color:#98C379;"> todo_idx</span><span style="color:#98C379;"> &lt;</span><span style="color:#98C379;"> len</span><span style="color:#C678DD;">(_TODOS[username])</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#98C379;">        _TODOS[username].pop</span><span style="color:#C678DD;">(todo_idx)</span></span>
<span class="line"><span style="color:#98C379;">    return</span><span style="color:#98C379;"> quart.Response</span><span style="color:#C678DD;">(response=&#39;OK&#39;, status=</span><span style="color:#D19A66;">200</span><span style="color:#C678DD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">@app</span><span style="color:#98C379;">.get</span><span style="color:#C678DD;">(&quot;</span><span style="color:#56B6C2;">/</span><span style="color:#C678DD;">logo.png&quot;)</span></span>
<span class="line"><span style="color:#98C379;">async</span><span style="color:#98C379;"> def</span><span style="color:#98C379;"> plugin_logo</span><span style="color:#C678DD;">()</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#98C379;">    filename</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> &#39;logo.png&#39;</span></span>
<span class="line"><span style="color:#98C379;">    return</span><span style="color:#98C379;"> await</span><span style="color:#98C379;"> quart.send_file</span><span style="color:#C678DD;">(filename, mimetype=&#39;image</span><span style="color:#56B6C2;">/</span><span style="color:#C678DD;">png&#39;)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">@app</span><span style="color:#98C379;">.get</span><span style="color:#C678DD;">(&quot;</span><span style="color:#56B6C2;">/</span><span style="color:#C678DD;">.well</span><span style="color:#56B6C2;">-</span><span style="color:#C678DD;">known</span><span style="color:#56B6C2;">/</span><span style="color:#C678DD;">ai</span><span style="color:#56B6C2;">-</span><span style="color:#C678DD;">plugin.json&quot;)</span></span>
<span class="line"><span style="color:#98C379;">async</span><span style="color:#98C379;"> def</span><span style="color:#98C379;"> plugin_manifest</span><span style="color:#C678DD;">()</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#98C379;">    host</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> request.headers[&#39;Host&#39;]</span></span>
<span class="line"><span style="color:#98C379;">    with</span><span style="color:#98C379;"> open</span><span style="color:#C678DD;">(&quot;.</span><span style="color:#56B6C2;">/</span><span style="color:#C678DD;">.well</span><span style="color:#56B6C2;">-</span><span style="color:#C678DD;">known</span><span style="color:#56B6C2;">/</span><span style="color:#C678DD;">ai</span><span style="color:#56B6C2;">-</span><span style="color:#C678DD;">plugin.json&quot;) </span><span style="color:#98C379;">as</span><span style="color:#98C379;"> f</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">        text</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> f.read</span><span style="color:#C678DD;">()</span></span>
<span class="line"><span style="color:#98C379;">        return</span><span style="color:#98C379;"> quart.Response</span><span style="color:#C678DD;">(text, mimetype=&quot;text</span><span style="color:#56B6C2;">/</span><span style="color:#C678DD;">json&quot;)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E06C75;">@app</span><span style="color:#98C379;">.get</span><span style="color:#C678DD;">(&quot;</span><span style="color:#56B6C2;">/</span><span style="color:#C678DD;">openapi.yaml&quot;)</span></span>
<span class="line"><span style="color:#98C379;">async</span><span style="color:#98C379;"> def</span><span style="color:#98C379;"> openapi_spec</span><span style="color:#C678DD;">()</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#98C379;">    host</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> request.headers[&#39;Host&#39;]</span></span>
<span class="line"><span style="color:#98C379;">    with</span><span style="color:#98C379;"> open</span><span style="color:#C678DD;">(&quot;openapi.yaml&quot;) </span><span style="color:#98C379;">as</span><span style="color:#98C379;"> f</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#ABB2BF;">        text</span><span style="color:#98C379;"> =</span><span style="color:#98C379;"> f.read</span><span style="color:#C678DD;">()</span></span>
<span class="line"><span style="color:#98C379;">        return</span><span style="color:#98C379;"> quart.Response</span><span style="color:#C678DD;">(text, mimetype=&quot;text</span><span style="color:#56B6C2;">/</span><span style="color:#C678DD;">yaml&quot;)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">def</span><span style="color:#98C379;"> main</span><span style="color:#C678DD;">()</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#98C379;">    app.run</span><span style="color:#C678DD;">(debug=True, host=&quot;localhost&quot;, port=</span><span style="color:#D19A66;">5003</span><span style="color:#C678DD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#98C379;">if</span><span style="color:#98C379;"> __name__</span><span style="color:#98C379;"> ==</span><span style="color:#98C379;"> &quot;__main__&quot;</span><span style="color:#ABB2BF;">:</span></span>
<span class="line"><span style="color:#98C379;">    main</span><span style="color:#C678DD;">()</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br></div></div><p>代码实现的思路大致如下：</p><p>这段代码是一个基于 Quart 和 Quart-CORS 的简单的 RESTful API 服务器，用于处理待办事项（todo）数据的 CRUD 操作（创建、读取、更新、删除）。Quart 是一个 Python 的异步 web 框架，相当于异步版本的 Flask。Quart-CORS 是一个用于处理跨源资源共享（CORS）的库。</p><p>下面是每段代码的简要解释：</p><ol><li><p>导入模块：</p><ul><li><code>quart</code>：Quart 框架的主要模块，用于创建和管理 web 应用。</li><li><code>quart_cors</code>：用于处理跨域资源共享 (CORS) 的 Quart 扩展。</li><li><code>json</code>：用于处理 JSON 数据的 Python 标准库。</li></ul></li><li><p>初始化应用：</p><ul><li><code>app = quart_cors.cors(quart.Quart(__name__), allow_origin=&quot;https://chat.openai.com&quot;)</code></li></ul><p>这里创建了一个 Quart 应用并允许来自 &quot;<a href="https://chat.openai.com/" target="_blank" rel="noreferrer">chat.openai.com</a>&quot; 的跨源请求。</p></li><li><p>定义一个全局的 <code>_TODOS</code> 字典，用于存储各用户的待办事项列表。</p></li><li><p>定义 API 路由：</p><ul><li><code>@app.post(&quot;/todos/&lt;string:username&gt;&quot;)</code>：添加待办事项。此 API 通过 POST 请求接受新的待办事项，并将其添加到特定用户的待办事项列表中。</li><li><code>@app.get(&quot;/todos/&lt;string:username&gt;&quot;)</code>：获取待办事项。此 API 通过 GET 请求返回特定用户的所有待办事项。</li><li><code>@app.delete(&quot;/todos/&lt;string:username&gt;&quot;)</code>：删除待办事项。此 API 通过 DELETE 请求和待办事项的索引来删除特定用户的一个待办事项。</li></ul></li><li><p>为插件提供的其他路由：</p><ul><li><code>@app.get(&quot;/logo.png&quot;)</code>：返回一个 logo 文件。</li><li><code>@app.get(&quot;/.well-known/ai-plugin.json&quot;)</code>：返回插件的 manifest 文件。这是一个包含插件元数据的 JSON 文件，如插件名、版本、描述等。</li><li><code>@app.get(&quot;/openapi.yaml&quot;)</code>：返回 OpenAPI 规范文件。OpenAPI 是一个用于描述和文档化 RESTful API 的规范。</li></ul></li><li><p>定义主函数：</p><ul><li>这个函数会在文件被作为脚本直接运行时启动 Quart 服务器。</li></ul></li></ol><p>总的来说，这段代码为一个基于用户的待办事项应用程序提供了一个 RESTful API。通过这些 API，应用程序可以添加、获取和删除待办事项。</p><h2 id="_6、总结" tabindex="-1">6、总结 <a class="header-anchor" href="#_6、总结" aria-label="Permalink to &quot;6、总结&quot;">​</a></h2><p>通过这个文章相信你对插件的开发应该没那么畏惧了，等待ChatGPT下周的更新所有Plus用户都会开始使用插件了，如果你有什么灵感也可以告诉我，我来实现你心目中的插件，来更好的辅助你完成你手头上需要处理的工作。</p><p>通过上面的代码也可以看到，是通过python语言进行实现插件的，但是通过代码实现我发现，通过go语言或者java、.net core、nodejs、php等语言应该都可以实现插件的，不出意外下周开始讨论插件的日子应该到来了，群里的人可能会问处理这个问题可以用那个插件。</p><p>更多插件玩法可以参考 <a href="https://github.com/openai/chatgpt-retrieval-plugin" target="_blank" rel="noreferrer">github.com/openai/chat…</a></p><p>插件文档地址可以参考 <a href="https://platform.openai.com/docs/plugins/introduction" target="_blank" rel="noreferrer">platform.openai.com/docs/plugin…</a></p><p>本文参考的代码仓库是 <a href="https://github.com/openai/plugins-quickstart" target="_blank" rel="noreferrer">github.com/openai/plug…</a></p>`,74),E=[g,D,_,F,f];function P(T,O,I,k,v,w){return e(),p("div",null,E)}const S=l(q,[["render",P]]);export{G as __pageData,S as default};
